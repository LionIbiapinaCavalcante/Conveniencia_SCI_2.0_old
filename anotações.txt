testeacademia@sci.com.br
senha = 
porta = 
segurança = 


def GerarPdfCompra(nome_colaborador, data_compra, hora_compra, carrinho, total_compra):
    pdf_filename = 'comprovante_compra.pdf'

    # Crie um objeto SimpleDocTemplate com o nome do arquivo PDF e o tamanho da página
    doc = SimpleDocTemplate(pdf_filename, pagesize=letter)

    # Defina o estilo padrão do documento
    style_sheet = getSampleStyleSheet()
    normal_style = style_sheet['Normal']
    bold_style = style_sheet['Heading1']

    # Crie uma lista para armazenar os elementos do PDF
    elements = []

    # Adicione o título do documento
    title = Paragraph("Conveniência SCI 2.0", bold_style)
    elements.append(title)

    # Adicione o nome do colaborador
    nome_colab = Paragraph(f"Prezado(a) {nome_colaborador}", normal_style)
    elements.append(nome_colab)

    # Adicione a data e hora da compra
    data_hora = Paragraph(f"Data da Compra: {data_compra}<br/>Hora da Compra: {hora_compra}", normal_style)
    elements.append(data_hora)

    # Adicione um espaço em branco
    elements.append(Spacer(1, 0.4 * inch))

    # Crie uma lista de dados da tabela
    data = [['Produto', 'Preço', 'Quantidade']]

    # Adicione os itens do carrinho na tabela
    for produto in carrinho:
        data.append([produto.nome, produto.preco, '1'])

    # Adicione a linha com o total da compra
    data.append(['', 'Total da Compra:', total_compra])

    # Defina o estilo da tabela
    table_style = TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), '#2D3560'),
        ('TEXTCOLOR', (0, 0), (-1, 0), '#FFFFFF'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('BOX', (0, 0), (-1, -1), 0.5, '#000000'),
    ])

    # Crie uma tabela com os dados e aplique o estilo
    table = Table(data)
    table.setStyle(table_style)

    # Adicione a tabela ao documento
    elements.append(table)

    # Construa o documento PDF com os elementos
    doc.build(elements)






class FinalizarCompra(View):
    def post(self, request):
        login_colaborador = request.POST.get('login_colaborador')
        senha = request.POST.get('senha')

        try:
            colaborador = Colaborador.objects.get(login=login_colaborador)

            if check_password(senha, colaborador.senha):

                if colaborador.situacao:
                    carrinho = CarrinhoCompras.carrinho

                    compra = RegistroCompra.objects.create(colaborador=colaborador, data_compra=date.today())

                    total_compra = sum(item.preco for item in carrinho)
                    compra.total_compra = total_compra
                    compra.save()

                    for item in carrinho:
                        ItemCompra.objects.create(registro_compra=compra, produto=item, valor=item.preco)

                    CarrinhoCompras.carrinho = []

                    # Envio de email após finalização da compra
                    data = timezone.localtime(timezone.now())
                    data_formatada = data.strftime('%d/%m/%Y')
                    hora_formatada = data.strftime('%H:%M:%S')

                    html_content = render_to_string('email/compra_realizada.html', {'colaborador': colaborador, 'carrinho': carrinho, 'data_formatada': data_formatada, 'hora_formatada': hora_formatada, 'total_compra': total_compra})
                    text_content = strip_tags(html_content)

                    email = EmailMultiAlternatives('Confirmação de Compra Conveniência SCI 2.0', text_content, settings.EMAIL_HOST_USER, ['lioncavalcantebnu@gmail.com'])
                    email.attach_alternative(html_content, 'text/html')
                    email.send()

                    # verificação da referência
                    data_atual = datetime.now().date()

                    # Cálculo referência mês anterior
                    if data_atual.day >= 26:
                        mes_anterior = data_atual.replace(day=1) - timedelta(days=1)
                        inicio_referencia_anterior = mes_anterior.replace(day=26)
                        fim_referencia_anterior = data_atual.replace(day=25)
                    
                    else:    
                        mes_anterior = data_atual.replace(day=1) - timedelta(days=1)
                        dois_meses_atras = mes_anterior.replace(day=1) - timedelta(days=1)
                        inicio_referencia_anterior = dois_meses_atras.replace(day=26)
                        fim_referencia_anterior = mes_anterior.replace(day=25)
                    
                    # Cálculo referência mês atual
                    if data_atual.day >= 26:
                        inicio_referencia_atual = data_atual.replace(day=26)
                        ultimo_dia_mes = calendar.monthrange(data_atual.year, data_atual.month)[1]
                        fim_referencia_atual = data_atual.replace(day=ultimo_dia_mes)
                    
                    else:
                        mes_anterior_2 = data_atual.replace(day=1) - timedelta(days=1)
                        inicio_referencia_atual = mes_anterior_2.replace(day=26)
                        fim_referencia_atual = data_atual.replace(day=25)

                    # Filtrar as compras das refrências
                    compras_referencia_anterior = RegistroCompra.objects.filter(data_compra__range=(inicio_referencia_anterior, fim_referencia_anterior), colaborador=colaborador)
                    compras_referencia_atual = RegistroCompra.objects.filter(data_compra__range=(inicio_referencia_atual, fim_referencia_atual), colaborador=colaborador)

                    # Calcule o gasto do período
                    gasto_referencia_anterior = round(sum(item.valor for compra in compras_referencia_anterior for item in compra.itemcompra_set.all()), 2)
                    gasto_referencia_atual = round(sum(item.valor for compra in compras_referencia_atual for item in compra.itemcompra_set.all()), 2)

                    return render(request, 'registro_de_compras/carrinho_de_compras.html', {'show_modal': True, 'colaborador': colaborador, 'gasto_referencia_anterior': gasto_referencia_anterior, 'gasto_referencia_atual': gasto_referencia_atual})

                else:
                    error_message = ('Colaborador inativo.')
                    messages.error(request, error_message)
                    return redirect('CarrinhoCompras')
            
            else:
                error_message = ('Login ou senha incorretos.')
                messages.error(request, error_message)
                return redirect('CarrinhoCompras')
                
        except Exception as e:
            print(str(e))
            error_message = ('Ocorreu um erro ao tentar realizar o login.')
            messages.error(request, error_message)
            return redirect('CarrinhoCompras')